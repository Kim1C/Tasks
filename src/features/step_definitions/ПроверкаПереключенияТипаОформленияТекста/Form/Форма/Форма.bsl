
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВвожуСодержаниеЗадачи()","ЯВвожуСодержаниеЗадачи","И я ввожу содержание задачи","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ТекстОписанияЗадачиТипаФорматированныйСохраняетсяВВиде(Парам01)","ТекстОписанияЗадачиТипаФорматированныйСохраняетсяВВиде","Тогда текст описания задачи типа форматированный сохраняется в виде 'Тут у нас простой текст описаняи задачи'","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И я ввожу содержание задачи
//@ЯВвожуСодержаниеЗадачи()
Процедура ЯВвожуСодержаниеЗадачи() Экспорт
	//КонтекстСохраняемый.ТестовоеПриложение.УстановитьРезультатДиалогаВыбораФайла(Истина,ИмяФайла);
	КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(,,"Содержание").ВвестиHTML("Тут у нас форматированный текст описаняи задачи");
	//Ванесса.ПосмотретьЗначение(КонтекстСохраняемый.ТестовоеПриложение,Истина);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда текст описания задачи типа форматированный сохраняется в виде 'Тут у нас простой текст описаняи задачи'
//@ТекстОписанияЗадачиТипаФорматированныйСохраняетсяВВиде(Парам01)
Процедура ТекстОписанияЗадачиТипаФорматированныйСохраняетсяВВиде(ПростойТекст) Экспорт
	HTMLСтрока = "";
	КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(,,"Содержание").ПолучитьHTML(HTMLСтрока,Новый Структура);
	пТекстСодержания = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(HTMLСтрока);
	//Ванесса.ПосмотретьЗначение(HTMLСтрока,Истина);
	//Ванесса.ПосмотретьЗначение(пТекстСодержания,Истина);
	Если ПростойТекст <> пТекстСодержания Тогда
		ВызватьИсключение "Тексты различаются!!";
	КонецЕсли;
КонецПроцедуры
